---
description: 
globs: 
alwaysApply: true
---

# Your rule content

#Instructions:
당신은 소프트웨어 기획과 개발을 마스터 했습니다. 
무슨 일을 하든 당신은 1) 기획을 하고 2) 코드를 구현하고 3) 구현 결과를 기획서에 반영 합니다.
콘텐츠 주제별로 /기획 폴더에 md 파일을 생성해서 관리하면 됩니다.

먼저, '프로젝트_메인기획.md' 파일이 없다면 생성하고 프로젝트의 개요, 목적, 개발환경 등을 기록합니다.
그리고, 이어서 큰 단위의 골격을 이루는 시스템과 콘텐츠의 기획서 파일을 생성하고 계획을 세웁니다.
그리고, 이것은 청사진을 생각하고 큰 포부와 계획을 고민하여 방향성과 계획에 대해 작성 합니다.

모든 기획서는 각각의 child/parent 관계 또는 연관을 명시하여 관리 하시오.
만약, 새로운 지시가 주어질 때 이미 연관 기획서가 존재하는지 탐색 합니다. 항상 프로젝트_메인기획.md을 먼저 확인하고 관리 합니다.
코드 작성 후 기획서를 수정(✅)하기 전에 반드시 유닛 테스트를 수행하고 해당 기능이 의도 한대로 작동하는지 실행된 결과로 검증하고 엣지 케이스 테스트도 수행 하시오.



----

# 소스코드 작성 및 관리
 - OOP에 입각해서 소스코드를 작성하고 관리 합니다.
 - 한 파일에 500줄 이하로 관리해야 합니다.
 - 500줄이 넘었다면 반드시 리팩토링을 해야 합니다.
 - 리팩토링시 규칙은 다음과 같습니다:
    주어진 Python 코드를 리팩토링할 때 다음 지침을 따르십시오:

    1. **작은 작업부터 시작할 것**  
    - 함수 내부의 긴 로직이나 블록을 분석합니다.  
    - 반복되거나 의미 단위로 분리 가능한 부분은 **즉시 별도의 함수로 추출**합니다.  
    - 이 추출된 함수는 **기본적으로 해당 모듈 내에 정의**하되, 파일 구조상 분리가 필요하다면 외부로 이동할 준비를 합니다.

    2. **의미 단위로 모듈 분리**  
    - 하나의 파일에 300줄 이상이 되지 않도록 조정합니다.  
    - 파일이 너무 커지거나 여러 기능이 혼합되어 있다면, **파일을 성격별로 분리**합니다.
    - 분리할 때는 함수, 클래스, 유틸리티 등이 **파일의 이름 및 역할에 논리적으로 부합**해야 합니다.
    - 주된 기준: “**이 코드가 이 파일 안에 있어야 할 이유가 명확한가?**”

    3. **함수 및 모듈 명명 규칙**
    - 함수는 해당 기능을 명확히 드러내는 **동사+명사 형태로 이름**을 짓습니다.
    - 파일 이름은 포함된 코드의 주제를 나타내야 하며, 너무 일반적이거나 중복된 이름은 피하십시오.

    4. **반복 제거 및 중복 코드 정리**
    - 유사한 코드가 여러 곳에 있을 경우, DRY 원칙에 따라 **공통 함수 또는 유틸리티로 통합**합니다.
    - 함수의 파라미터가 너무 많거나 조건문이 복잡한 경우, 내부 로직을 단계별로 나누어 간결하게 유지하십시오.

    5. **리팩토링 후 코드의 목적이 명확히 드러나야 함**
    - 각 함수/모듈/클래스는 **하나의 책임 또는 개념**만을 담당해야 합니다.
    - 불필요하게 서로 의존하거나, 너무 많은 책임을 가진 경우 반드시 분리하십시오.

    이 과정을 반복적으로 적용하면서 **점진적 개선**을 수행하십시오.
    리팩토링 작업은 ‘한 번에 모든 걸 바꾸는 것’이 아니라, **작고 안전한 변화의 누적**입니다.

    타겟 파일은 실행 전 백업 파일부터 만들어 두고,
    작업을 모두 마치면 백업파일과 대조하여 모든 처리가 정확히 완료 되었는지 검증의 과정을 수행해야 합니다.

    최종적으로 타겟 파일을 잘 정돈해서 끝내시오.

----

# 소스코드와 기획서 연결
 - 모든 파이썬(.py)과 리액트(.jsx, .tsx) 소스코드 파일의 최상단에는 해당 파일과 연관된 기획서 정보를 주석으로 명시해야 합니다.
 - 주석 형식은 다음과 같습니다:
   - 파이썬: """관련 기획서: /기획/xxx.md"""
   - 리액트: /**관련 기획서: /기획/xxx.md**/
 - 하나의 소스코드가 여러 기획서와 연관되어 있다면 모두 명시해야 합니다.
 - 기획서 연결 주석은 라이센스와 같은 다른 필수 주석 다음, 임포트 구문 이전에 위치해야 합니다.
 - 코드 수정 시 연관 기획서가 변경되었다면 주석도 함께 업데이트해야 합니다.

----

# 로그
 - 모든 프로그램 전반에 로그 시스템을 잘 갖추고 로그를 출력 하도록 합니다.
 - 로그는 문제를 해결하기 위한 추적 수단으로 매우 적극적인 활용을 할 것입니다.

----

# 프로젝트 경로:
백엔드: /backend
프론트엔드: /frontend

----

# 어플리케이션 개발 공통 
 - 각각의 애플리케이션 소스코드는 항상 dev와 product를 고려한 환경변수를 구성 하시오.
 - 새 환경을 구축하거나 어떤 것을 실행할 때, 터미널에서 사용자가 y를 입력하지 않도록 command를 구성 하시오.


----

# Python 환경 개발시
파이썬 프로젝트의 경우 항상 uv 의존성 관리 라이브러리를 사용하십시오. (예: uv init, uv add moduleName )
.venv 가상환경을 사용 하시오.
python 대신 python3를 실행 하시오.
uv 사용 방법이 필요할 때, rules_uv.md 파일을 열어 사용법을 확인 하시오.

----

# 프로젝트_메인기획.md 작성시
 - 메인기획은 핵심적인 전체 골격에 대한 시스템 기획과도 같습니다.
 - 방향을 지휘하는 디렉터와도 같습니다.
 - 지속적으로 관리하며 향후 플랜 구성(작성)을 늘 하며 전문 개발자의 퍼포먼스를 보여 주십시오.

----

# 리팩토링 전략
 - 어떤 소스코드 파일이든 500line을 넘을 경우 리팩토링의 대상이 됩니다.
 - 소스코드가 하나의 파일에 과도하게 응집되지 않도록 해야 합니다.
 - 이러한 조건에 해당하는 소스코드를 발견하면 리팩토링을 계획하고 시행해야 합니다.
 - 리팩토링 실행 과정은 작은 응집과 모듈화를 시작으로 명확하게 착오 없이 분리되어야 합니다.
 - 충분히 생각하고 계획하여 실행해야 합니다.

----

각 기획서(md file)의 기본 템플릿은 다음과 같습니다:
```
이 기획서는 {{주제}}에 대한 기획서입니다.
완료된 이슈는 ✅, 아직인 경우 ❌ 아이콘을 사용 합니다.
[✅] ㅇㅇㅇ 구현
[❌] ㅇㅇ 구현

[연관 기획서]
 -

[연관 폴더와 파일]
 -

[핵심 주제]
 -

[Tasks]
 - 

```

예시는 다음과 같습니다:
```
이 기획서는 프롬프트를 편집하고 저장할 수 있는 에디터 기능에 대한 기획서입니다.
완료된 이슈는 ✅, 아직인 경우 ❌ 아이콘을 사용 합니다.
[✅] ㅇㅇㅇ 구현
[❌] ㅇㅇ 구현

[연관 기획서]
 - [:Parent:] xx 문서
 - [:Child:] xx 문서
 - [:Rel:] xx 문서

[연관 폴더와 파일]
 - app/PromptEditor.py

[핵심 주제]
 - [✅] 저장된 프롬프트를 로드
 - [✅] 프롬프트를 편집할 수 있는 편집기
 - [❌] 프롬프트를 저장하면 데이터베이스에 저장

[Tasks]
 - [✅] 저장된 프롬프트를 로드 ...
 - [✅] 프롬프트를 편집할 수 있는 편집기 ...
 - [❌] 프롬프트를 저장하면 데이터베이스에 저장 ...
 - ...
```

